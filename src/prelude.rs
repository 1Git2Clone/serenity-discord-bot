///////////////////////////////////////////////////////////////////////////////////////////////////
// Feature gated
///////////////////////////////////////////////////////////////////////////////////////////////////
#[cfg(feature = "serde")]
pub use serde::{Deserialize, Serialize};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Potentially unused/marked as used. But useful to have as a prelude part.
///////////////////////////////////////////////////////////////////////////////////////////////////
#[allow(unused_imports)]
pub use crate::enums::emojis::Emojis;
#[allow(unused_imports)]
pub use reqwest::{Response, StatusCode};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Local crate/derive items
///////////////////////////////////////////////////////////////////////////////////////////////////
pub use crate::{
    assets::Assets,
    cdn_url,
    commands::{
        cmd_utils::{
            self, get_rand_embed_from_type, get_replied_user, make_full_response, same_user,
        },
        embed_commands::user_interaction,
        level_logic::update_level,
    },
    data::{
        bot_data::{
            BOT_PREFIXES, BOT_TOKEN, DEFAULT_LEVEL, DEFAULT_XP, EMOJIS_AND_EMBEDS_REGEX,
            START_TIME, VALID_MENTION_COUNT_PATTERNS, XP_COOLDOWN_NUMBER_SECS, XP_RANGE,
        },
        command_data::{Context, Data, Error},
        database::{DATABASE_FILENAME, MENTIONS_TABLE_NAME},
        embed_media::COMMAND_EMBEDS,
        user_data::USER_COOLDOWNS,
    },
    database::{bot_mentions::*, connect_to_db, level_system::*},
    enums::{
        command_enums::EmbedType,
        schemas::{LevelsSchema, MentionsSchema},
    },
    media_url,
};
pub use serenity_discord_bot_derive::IterateVariants;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Standard re-exports
///////////////////////////////////////////////////////////////////////////////////////////////////
pub use std::{borrow::Cow, collections::HashMap, path::Path, sync::Arc};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Serenity
///////////////////////////////////////////////////////////////////////////////////////////////////

// Normal serenity
pub use ::serenity::{
    all::Mentionable,
    futures::future::{join_all, try_join_all},
};

// Poise serenity
pub use poise::serenity_prelude as serenity;
pub use serenity::{
    model::id::{GuildId, UserId},
    User,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Databases
///////////////////////////////////////////////////////////////////////////////////////////////////
pub use sqlx::{
    prelude::*,
    sqlite::{SqliteConnectOptions, SqlitePool, SqlitePoolOptions, SqliteQueryResult, SqliteRow},
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Other
///////////////////////////////////////////////////////////////////////////////////////////////////
pub use lazy_static::lazy_static;
pub use rand::prelude::*;
pub use rayon::prelude::*;
pub use regex::Regex;
